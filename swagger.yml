swagger: "2.0"
info:
  description: This is the swagger file that goes with our server code
  version: "1.0.0"
  title: Swagger REST Article
consumes:
  - application/json
produces:
  - application/json

basePath: /api

definitions:
  SpokenLanguages:
    type: array
    items:
      properties:
        defaultLanguage:
          type: string
          default: english
        proficency:
          type: integer
          format: int32
          minimum: 0
          maximum: 5

  person:
    properties:
      fname:
        type: string
        pattern: '[a-z]'
        minLength: 4
        maxLength: 10
        description: First name of person to create
      lname:
        type: string
        pattern: '[a-z]'
        minLength: 4
        maxLength: 10
        description: Last name of person to create
      email:
        type: string
        pattern: '[a-z]@[a-z].com'
      age:
        type: integer
        format: int32
        minimum: 15
        exclusiveMinimum: False
        default: 15
        maximum: 17
        exclusiveMaximum: False
      avatarBase64PNG:
        type: string
        format: byte
      languajes:
        $ref: '#/definitions/SpokenLanguages'
      sex:
        type: string
        enum:
          - Male
          - Female
          - Tranny

# Paths supported by the server application
paths:
  /people:
    get:
      operationId: api_methods.people.read
      tags:
        - People
      summary: The people data structure supported by the server application
      description: Read the list of people
      responses:
        200:
          description: Successful read people list operation
          schema:
            type: array
            items:
              properties:
                fname:
                  type: string
                lname:
                  type: string
                timestamp:
                  type: string

    post:
          operationId: api_methods.people.create
          tags:
            - People
          summary: Create a person and add it to the people list
          description: Create a new person in the people list
          parameters:
            - name: person
              in: body
              description: Person to create
              required: True
              schema:
                type: array
                items:
                  $ref: '#/definitions/person'
                  required:
                    - lname
          responses:
            201:
              description: Successfully created person in list
            406:
              description: Person already exists


  /people/{lname}:
    put:
        operationId: api_methods.people.update
        tags:
          - People
        summary: Update method for a group or one person
        description: Update person
        parameters:
          - name: lname
            in: path
            type: string
            required: True
          - name: person
            in: body
            description: Person to create
            required: True
            schema:
              type: array
              items:
                $ref: '#/definitions/person'
                required:
                  - lname
        responses:
          200:
            description: Successfully update person in list.
          201:
            description: The person does not exist. So it is created.(if created)
          404:
            description: Person does not exist.


    delete:
        operationId: api_methods.people.delete
        tags:
          - People
        summary: Delete method for person
        description: Delete method for several person
        parameters:
          - name: lname
            in: path
            type: string
            required: True
        responses:
          200:
            description: Successfully deleted a person
          404:
            description: person does not exist

